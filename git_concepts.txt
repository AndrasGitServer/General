GIT	Version Control System (VCS)
***
A piece of software that helps you keep track of your computer programs and files
and the changes that are made to them over time. 
(tracking changes in files).
It also allows you to collaborate with your peers on a program, code, or file. 
(the version control software GitHub is built on).
Create a backup of our code.


Overview (what to study)
********
1- Explain background (general) info
2- Tools
3- Get it running on your system
4- Get it set up to start working with



Characteristics
***************
- Distributed (decentralized) version control: many developers can work on the
  same project without having to be on the same network.
- Coodinates work between multiple developers & tracks every single change that is
  made on the project.
- Who made what changes & when.
- Revert back at any time.
- You have a repository on your local machine, where you work on & make changes.
- Push your local repository to the remote repository (GitHub or BitBucket).
- Keeps track of your code history.
- Takes "snapshots" of your files.
- You decide when to take a "snapshot" by making a COMMIT.
- you stage files before commiting.


Step 1)
*******
Create a local folder and go inside,
and type the following commands to initialize this repository (repo):

$ mkdir local_repo
$ cd local_repo
$ git init

Note: if you did this already then you will get a message:
Reinitialized existing Git repository in <current_directory>/.git/
(.git is a directory)


Step 2) (Do only once on your computer ?)
*******
Configure GIT on local machine at the Command Line Interface (CLI) to work with GitHub:

$ git config --global user.name "AndrasGitServer"
$ git config --global user.email "andras_pc@hotmail.com"
$ cat .gitconfig	(in home folder)


Configuring GitHub after local repository is init & GitHub new repository is created:
*************************************************************************************
$ git remote
$ git remote add origin https://github.com/my_account_name/new_repo_name
$ git push -u origin master
$ git remote


NOTE: the GitHub repository is a *FOLDER*
To Clone a GitHub repository to your Git_local_workspace folder or another directory:
1) Go to your GitHub account and click on the repository name.
2) Click on Clone or download button.
3) Copy the URL given in the box.
4) Go to your local CLI and type command & paste URL: 
   $ git clone https://github.com/AndrasGitServer/Hello-World.git


LOCAL GIT REPOSITORY COMMANDS
*****************************
$ git init		Initialize local Git repository !
				.git folder is created.


$ git status			(new files in the local folder (working directory) are color: RED)
				(that's different from the repository that's not currently in Staging)
				(changed).
				(if you type $ git status in a folder that is not initialized,
				 it will give you an error:
				 fatal: not a Git repository (there is no .git file)).
				(added files in the local folder Staging Area are color: GREEN)
				(will show you what is currently in the Staging Area,
				 and also what are some of the files in your working directory
				 that are different from the last backup).
				(we can get the status of the differences)
				(what are the differences between the working directory and
				 the repository).



$ git add helloWorld.txt	Add file to staging area.
or				(prepare all the files adding them to the Staging Area).
$ git add .			(all files that are changed or different from the last backup
				 created in the repository).


$ git diff			(line-by-line differences).


$ git commit -m "First .txt file comment"	(file is not in the GitHub account YET).
						(send all files from the Staging Area to the local repository).


$ git remote			Shows if a remote repository has been added (connected) to your local repository



Working with remote repositories (GitHub)(add remote service)
*************************************************************

$ git push			(files added without UserName & password)


$ git push -u origin master	(provide UserName & password for GitHub
				 & files will be added to *GitHub* repository)


$ git log			(all the backups in the repo with their messages that you typed).
				(in other words, it shows you all commits !).


$ git blame <file_name>		(will tell who wrote the lines of code).


$ git pull			Pull the latest changes from Remote Repository


$ git clone			Copy a remote repository into your local folder
				(download to your machine)


GitHub 
******
And similar services (including GitLab and BitBucket) are websites that host
a Git server program to hold your code.
Is a code hosting platform for version control and collaboration. 
It lets you and others work together on projects from anywhere.
Is a platform where you can upload your code for others to see.


Supply chain management (SCM) 
*****************************
Is the broad range of activities required to
plan, control and execute a product's flow, 
from acquiring raw materials and production through distribution to the final customer,
in the most streamlined and cost-effective way possible.


The Git repository is hosted on GitHub. (remote).


GITHUB Step 1. Create a Repository
----------------------------------
A repository is usually used to organize a single project. 
Repositories can contain folders and files, images, videos, spreadsheets, 
and data sets – anything your project needs. 
    *********
We recommend including a README, or a file with information about your project. 
GitHub makes it easy to add one at the same time you create your new repository.

To create a new repository:
-In the upper right corner, next to your avatar or identicon, click  and then select New repository.
-Name your repository hello-world.
-Write a short description.
-Select Initialize this repository with a README.
-Click Create repository.



GITHUB Step 2. Create a Branch
------------------------------
Branching is the way to work on different versions of a repository at one time.
By default your repository has one branch named master 
                                                ******
which is considered to be the definitive branch. 
We use branches to experiment and make edits before committing them to master.
When you create a branch off the master branch, you’re making a copy, or snapshot, of master as it was at that point in time. If someone else made changes to the master branch while you were working on your branch, you could pull in those updates.
Have you ever saved different versions of a file? Something like:

story.txt
story-joe-edit.txt
story-joe-edit-reviewed.txt
Branches accomplish similar goals in GitHub repositories.

Here at GitHub, our developers, writers, and designers use branches for keeping bug fixes and feature work separate from our master (production) branch. 
When a change is ready, they merge their branch into master.
                             *****
To create a new branch:
-Go to your new repository hello-world.
-Click the drop down at the top of the file list that says branch: master.
-Type a branch name, readme-edits, into the new branch text box.
-Select the blue Create branch box or hit “Enter” on your keyboard.
Now you have two branches, master and readme-edits. They look exactly the same, 
but not for long! Next we’ll add our changes to the new branch.


$ git push				(push your master branch to the origin (online) ).
$ git pull
$ git clone __ <url>
$ git remote add origin __ <url>

$ git [enter]				(shows common Git commands, meaning Git is installed !).


Create a branch on the local repository & switch branches
*********************************************************
Note: the branch name will change from (master) -> (<branch_name>)
$ git branch <branch_name>
$ git checkout <branch_name>


Merge a branch to the master branch on Git
******************************************
$ git checkout master
$ git merge <branch_name>



General (June 5, 2020)
----------------------
Find the name of the remote repo (on GitHub), go inside your local repo .git (root of your working tree)
$  git  remote  -v


Rename the name of the remote repo (on GitHub)
(Rename a GitHub repository) (change the name on GitHub)
Note: the URL will also change !
a) On the web sign in your GitHub account
b) Navigate to the main page of the repository
c) Click SETTINGS
d) Under the Repository Name heading, type the new name of your repository
e) Click RENAME


Updating an existing local clone to point to the new repository name (web URL)
(You need the new URL, on GitHub click on the button CLONE OR DOWNLOAD and copy it)
$  git  remote  set-url  origin  <new_url>
$  git  remote  set-url  origin  https://github.com/AndrasGitServer/General.git


Confirm the change of name locally
$  git  remote  -v



Git (and pull request workflows) tutorial YouTube
--------------------------------


- Git has 3 states (groups) that we can have files in our projects
  (We move files from one state to another with git commands | verbs)
  Working Directory	<->	Staging Area	<->	.git directory (Git Repository) (Committed files)
  

- Working Directory has untracked and modified files, we list these with the git status command.


- Staging Area (stage fixes) has the files we organize that we want to commit to our local Git Repository.
  (the reason is that we can pick & choose, detailed individual files or groups of files)
  (what we want to be committed)
  we also list these files with the git status command.


- .git directory has the committed files.


- Install Git locally (on your machine)
and then in Git bash run:
$ git --version


- Set up global configuration variables (set config values) (configure Git)
$ git config --global user.name  "your_username_unique_or_github_name"
$ git config --global user.email "andras_pc@hotmail.com"


- List all configuration variables (values)
$ git config --list


- Need help (man pages)
$ git help <verb>
	or
$ git <verb> --help


- If you ever want to stop tracking a project with Git, 
  remove the .git directory within our project
$ rm -rf .git


2 common scenarios:
1) An existing project on your local machine (local repo), that you want to start tracking using Git
   (you have a local code base that you want to start tracking using Git)
   run the command from within the directory in Git bash:
   $ git init
   (creates a .git directory)

	or

2) An existing project remotely (remote repo), that you want to start developing on
   (clone a remote repository) (will copy the files & folders within the remote repo)
   $ git clone <url_remote_repo_GITHUB> <path_to_local_directory>

   View info about the remote repo
   $ git remote -v
	or
   $ git branch -a


- Show tracked and untracked files (in our working directory area and in our stage area)
  (changes that will be committed)
$ git status


- Files that we do NOT want (to add) in our repository for other people to see,
  (files that contain personal preferences, specific to our machine or our OS)
  (are NOT part of the code that we want to track)
  (Ignore these files)
  Create a .gitignore file:
  $ touch .gitignore
  Open this file in your text editor and add files you do not want to track:
  $ code .gitignore
  run git status again to see the .gitignore file included, we want to commit .gitignore !
  $ git status


- Add all files to the Staging area
$ git add -A


- Remove files from the Staging area to the working directory
$ git reset <file_name>
	or
$ git reset


- Commit files from the staging area to the local Git repository
$ git commit -m "commit message indicating your changes to the code"


- We can see the commits we have made with Hash numbers, author and email
$ git log


- Push files with changes to a remote repo, do a pull also:
$ git pull origin master
$ git push origin master



Git Branches
------------



